{
  "name": "Nimcl",
  "tagline": "High level wrapper over OpenCL",
  "body": "# Nim OpenCL utilities\r\n\r\nThis is an attempt at a high level wrapper over\r\n[OpenCL](https://github.com/nim-lang/opencl/).\r\n\r\nFor now, things are added when needed and as such, they may not be perfectly\r\ncoherent. Still, they should be enough to cover the simplest cases and get\r\nstarted.\r\n\r\nSome API changes can also be expected as the library becomes more\r\ncomprehensive.\r\n\r\n## Vector add example\r\n\r\nThe \"hello, world!\" of OpenCL:\r\n\r\n```nim\r\nconst\r\n  body = staticRead(\"vadd.cl\")\r\n  size = 1_000_000\r\nvar\r\n  a = newSeq[float32](size)\r\n  b = newSeq[float32](size)\r\n  c = newSeq[float32](size)\r\n\r\nfor i in 0 .. a.high:\r\n  a[i] = i.float32\r\n  b[i] = (i * i).float32\r\n\r\nlet\r\n  (device, context, queue) = singleDeviceDefaults()\r\n  program = context.createAndBuild(body, device)\r\n  add = program.createKernel(\"add_vector\")\r\n  gpuA = context.bufferLike(a)\r\n  gpuB = context.bufferLike(b)\r\n  gpuC = context.bufferLike(c)\r\n\r\nadd.args(gpuA, gpuB, gpuC, size.int32)\r\n\r\nqueue.write(a, gpuA)\r\nqueue.write(b, gpuB)\r\nqueue.run(add, size)\r\nqueue.read(c, gpuC)\r\n\r\necho c[1 .. 100]\r\n\r\n# Clean up\r\nrelease(queue)\r\nrelease(add)\r\nrelease(program)\r\nrelease(gpuA)\r\nrelease(gpuB)\r\nrelease(gpuC)\r\nrelease(context)\r\n```\r\n\r\nThe kernel is just\r\n\r\n```opencl\r\n__kernel void add_vector(__global float* a, __global float* b, __global float* c, int num_els) {\r\n  int idx = get_global_id(0);\r\n  if (idx < num_els) {\r\n    c[idx] = a[idx] + b[idx];\r\n  }\r\n}\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}